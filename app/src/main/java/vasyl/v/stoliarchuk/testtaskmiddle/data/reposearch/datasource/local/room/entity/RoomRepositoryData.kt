package vasyl.v.stoliarchuk.testtaskmiddle.data.reposearch.datasource.local.room.entity

import android.arch.persistence.room.*

@Entity(tableName = RoomRepositoryData.TABLE_NAME,
        foreignKeys = [
            ForeignKey(entity = RoomOwner::class,
                    parentColumns = [RoomOwner.COLUMN_ID],
                    childColumns = [RoomRepositoryData.COLUMN_OWNER_ID])],
        indices = [(Index(name = "IXFK_" + RoomRepositoryData.TABLE_NAME + "_" + RoomRepositoryData.COLUMN_OWNER_ID, value = [(RoomRepositoryData.COLUMN_OWNER_ID)])),
            (Index(name = "IXFK_" + RoomRepositoryData.TABLE_NAME + "_" + RoomRepositoryData.COLUMN_LICENSE_KEY, value = [(RoomRepositoryData.COLUMN_LICENSE_KEY)]))])
data class RoomRepositoryData(
        @PrimaryKey @ColumnInfo(name = COLUMN_ID) var id: Int,
        @ColumnInfo(name = "nodeId") var nodeId: String?,
        @ColumnInfo(name = COLUMN_NAME) var name: String?,
        @ColumnInfo(name = "full_name") var fullName: String?,
        @ColumnInfo(name = COLUMN_OWNER_ID) var ownerId: Int?,
        @ColumnInfo(name = "private") var _private: Boolean,
        @ColumnInfo(name = "html_url") var htmlUrl: String?,
        @ColumnInfo(name = "description") var description: String?,
        @ColumnInfo(name = "fork") var fork: Boolean,
        @ColumnInfo(name = "url") var url: String?,
        @ColumnInfo(name = "forks_url") var forksUrl: String?,
        @ColumnInfo(name = "keys_url") var keysUrl: String?,
        @ColumnInfo(name = "collaboratorsUrl") var collaboratorsUrl: String?,
        @ColumnInfo(name = "teamsUrl") var teamsUrl: String?,
        @ColumnInfo(name = "hooksUrl") var hooksUrl: String?,
        @ColumnInfo(name = "issueEventsUrl") var issueEventsUrl: String?,
        @ColumnInfo(name = "eventsUrl") var eventsUrl: String?,
        @ColumnInfo(name = "assigneesUrl") var assigneesUrl: String?,
        @ColumnInfo(name = "branchesUrl") var branchesUrl: String?,
        @ColumnInfo(name = "tagsUrl") var tagsUrl: String?,
        @ColumnInfo(name = "blobsUrl") var blobsUrl: String?,
        @ColumnInfo(name = "gitTagsUrl") var gitTagsUrl: String?,
        @ColumnInfo(name = "gitRefsUrl") var gitRefsUrl: String?,
        @ColumnInfo(name = "treesUrl") var treesUrl: String?,
        @ColumnInfo(name = "statusesUrl") var statusesUrl: String?,
        @ColumnInfo(name = "languagesUrl") var languagesUrl: String?,
        @ColumnInfo(name = "stargazersUrl") var stargazersUrl: String?,
        @ColumnInfo(name = "contributorsUrl") var contributorsUrl: String?,
        @ColumnInfo(name = "subscribersUrl") var subscribersUrl: String?,
        @ColumnInfo(name = "subscriptionUrl") var subscriptionUrl: String?,
        @ColumnInfo(name = "commitsUrl") var commitsUrl: String?,
        @ColumnInfo(name = "gitCommitsUrl") var gitCommitsUrl: String?,
        @ColumnInfo(name = "commentsUrl") var commentsUrl: String?,
        @ColumnInfo(name = "issueCommentUrl") var issueCommentUrl: String?,
        @ColumnInfo(name = "contentsUrl") var contentsUrl: String?,
        @ColumnInfo(name = "compareUrl") var compareUrl: String?,
        @ColumnInfo(name = "mergesUrl") var mergesUrl: String?,
        @ColumnInfo(name = "archiveUrl") var archiveUrl: String?,
        @ColumnInfo(name = "downloadsUrl") var downloadsUrl: String?,
        @ColumnInfo(name = "issuesUrl") var issuesUrl: String?,
        @ColumnInfo(name = "pullsUrl") var pullsUrl: String?,
        @ColumnInfo(name = "milestonesUrl") var milestonesUrl: String?,
        @ColumnInfo(name = "notificationsUrl") var notificationsUrl: String?,
        @ColumnInfo(name = "labelsUrl") var labelsUrl: String?,
        @ColumnInfo(name = "releasesUrl") var releasesUrl: String?,
        @ColumnInfo(name = "deploymentsUrl") var deploymentsUrl: String?,
        @ColumnInfo(name = "createdAt") var createdAt: String?,
        @ColumnInfo(name = "updatedAt") var updatedAt: String?,
        @ColumnInfo(name = "pushedAt") var pushedAt: String?,
        @ColumnInfo(name = "gitUrl") var gitUrl: String?,
        @ColumnInfo(name = "sshUrl") var sshUrl: String?,
        @ColumnInfo(name = "cloneUrl") var cloneUrl: String?,
        @ColumnInfo(name = "svnUrl") var svnUrl: String?,
        @ColumnInfo(name = "homepage") var homepage: String?,
        @ColumnInfo(name = "size") var size: Int,
        @ColumnInfo(name = "stargazersCount") var stargazersCount: Int,
        @ColumnInfo(name = "watchersCount") var watchersCount: Int,
        @ColumnInfo(name = "language") var language: String?,
        @ColumnInfo(name = "hasIssues") var hasIssues: Boolean,
        @ColumnInfo(name = "hasProjects") var hasProjects: Boolean,
        @ColumnInfo(name = "hasDownloads") var hasDownloads: Boolean,
        @ColumnInfo(name = "hasWiki") var hasWiki: Boolean,
        @ColumnInfo(name = "hasPages") var hasPages: Boolean,
        @ColumnInfo(name = "forksCount") var forksCount: Int,
        @ColumnInfo(name = "mirrorUrl") var mirrorUrl: String?,
        @ColumnInfo(name = "archived") var archived: Boolean,
        @ColumnInfo(name = "openIssuesCount") var openIssuesCount: Int,
        @ColumnInfo(name = COLUMN_LICENSE_KEY) var licenseKey: String?,
        @ColumnInfo(name = "forks") var forks: Int,
        @ColumnInfo(name = "openIssues") var openIssues: Int,
        @ColumnInfo(name = "watchers") var watchers: Int,
        @ColumnInfo(name = "defaultBranch") var defaultBranch: String?,
        @ColumnInfo(name = "score") var score: Double?) {


    companion object {
        const val TABLE_NAME = "repositories_table"
        const val COLUMN_ID = "id"
        const val COLUMN_NAME = "name"
        const val COLUMN_LICENSE_KEY = "licenseKey"
        const val COLUMN_OWNER_ID = "ownerId"
    }
}